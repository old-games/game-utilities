Файл графики .BOB игры REALMS OF ARKANIA 2: STAR TRAIL состоит из одного или
двух заголовков,набора картинок,дополнительного дескриптора и палитры.
Первый заголовок (необязательный) представляет собой,фактически,выборку из
второго заголовка. Он устроен так:
+0 DB*3 'BOB' - сигнатура 1-го заголовка
+3 DB 1
+4 DB число главных страниц? (=N1) (всегда 1)
+5 DB число последовательностей (=N2)
+6 DB N3 (всегда 10)
+7 DB*N3 неизвестно что (нигде не используется)
+? DB*N2 число дескрипторов фаз в каждом из идущих далее списков
+? ... N1*N2 списков дескрипторов фаз (тех же, что в заголовках последователь-
       ностей)
+? ... второй заголовок
Список дескрипторов фаз устроен так:
+0 DB флаги (всегда 0)
+1 DW число дескрипторов фаз в списке (=N4)
+3 ... сами дескрипторы фаз (N4 штук)
Дескриптор фазы устроен так:
+0 DB номер картинки в последовательности, считая с 1
+1 DB неизвестно что (не играет роли, обычно 0)
+2 DW время выдержки фазы на экране в циклах, умноженное на 2.5
Второй заголовок (обязательный) устроен так:
+0 DD размер второго заголовка
+4 DD смещение дополнительного дескриптора от начала второго заголовка
+8 DW ширина главной страницы
+A DB высота главной страницы
+B DB число последовательностей в файле (=M)
+C DD*M смещения заголовков последовательностей от начала второго заголовка
+? ... сами заголовки последовательностей (M штук)
+? ... картинки
Заголовок последовательности устроен так:
+0 DB*4 имя последовательности
+4 DW собственный сдвиг слева (бывает не тот,что надо - видимо,автор был косой)
+6 DB собственный сдвиг сверху (-"-)
+7 DB высота картинки
+8 DW ширина картинки
+A DB флаги (всегда 0)
+B DB число картинок в последовательности (=K1)
+C DD*K1 смещения тел картинок последовательности от начала второго заголовка
      (для сжатых картинок все они указывают на сжатый как единое целое блок из
      подряд идущих этих картинок)
+? DW число дескрипторов фаз (=K2)
+? ... сами дескрипторы фаз (K2 штук)
Дополнительный дескриптор устроен так:
+0 DW неизвестно что (нигде не используется)
+2 DW -"-
+4 DB число цветов в палитре
+5 DB флаг сжатия: <>0, если все картинки сжаты, 0 - если все несжатые
Палитра устроена так:
+0 DB*3 1-й цвет; 2 старших бита в байтах, насколько мне известно, игнорирую-
        тся, кроме случая, когда все 3 байта равны 0FFh: в этом случае цвет
        не переустанавливается, сохраняя значение из уже активной на этот
        момент палитры.
+3 DB*3 2-й цвет
+6 ... так же для всех цветов
Палитры .BOB-файла всегда достаточно для его отрисовки (в отличие от .NVF).
Картинки имеют различный тип компрессии в зависимости от флага сжатия, а именно:
-флаг=0: картинки не сжаты, просто побайтовый образ области (ширина*высота байт)
-флаг<>0: картинки сжаты LZSS-методом в весьма идиотской реализации, для исполь-
          зования в программах почти непригодной. А именно:
          Картинка в файле рассматривается как массив битов, причем выборка их
          идет начиная с младших битов и со _старших_ адресов. Выбранные биты
          вдвигаются в результат _справа_ в порядке выборки, то есть в результа-
          те они оказываются расположенными в порядке, _обратном_ расположению в
          файле. LZSS-раскодировка идет по следующей схеме: пусть @=размер
          картинки в файле, #-смещение в выходном буфере, входной и выходной
          буфер начинаются со смещения 0. Тогда # :=(по байтам) 0:[@-3]:[@-2]:
          [@-1], массив битов начинается с [@-5], причем байт [@-4] содержит,
          сколько первых битов следует пропустить.После чего в цикле читаются из
          входного потока и обрабатываются следующие битовые последовательности:
          - либо 0 11 11 .... 11 ?? ...                 , либо 1
                  └──┴──┴┬───┴──┘├┘└───┴─┐
                      N штук     └M<>11b байты данных
            Это блок извлечения из входного потока (3*N+M) байт данных, причем
            _перед_ помещением каждого байта в выходной поток, # _уменьшается_
            на 1. После этого блока выполняется проверка, заполнен ли выходной
            буфер. Этого блока может не быть (когда 1 вместо 0 в его начале).
          - после чего либо 11 k ... 111 111 .... 111 ???  , либо ?? ...
                                 └┬┘└───┴───┴┬───┴───┘├─┘         ├┘ └─┴─┐
                                  СNT бит    N штук   └M<>111b    X<>11b │
                                                                  СNT бит┘
            Это блок копирования строки байт. В его первом варианте, если бит
            k=0, то CNT:=7, иначе CNT:=байт по смещению 7 во входном буфере;
            длина копируемой строки равна (7*N+M+5) байт. Во втором варианте,
            CNT:=байт по смещению (4+X) во входном буфере, а длина равна (X+2).
            В обеих вариантах, "CNT бит" образуют словное смещение D, и байты
            извлекаются со смещения (#+D) в выходном буфере, затем # _уменьша-
            ется_ на 1, и только затем байт помещается по смещению #. После
            этого блока выполняется проверка, заполнен ли выходной буфер. Если
            нет, то цикл повторяется.
Раскодировка прекращается в момент заполнения выходного буфера (когда смещение #
приняло значение 0).
Следует еще упомянуть, что при LZSS-сжатии, в картинке по смещению 0 находится
двойное слово - размер этого тела.
Все картинки одной последовательности сжимаются как единое целое.
Очередные фазы всех последовательностей отрисовываются одновременно (указанные в
дескрипторах фаз картинки на указанное там время) поверх главной страницы.При
выводе картинок последовательности,точки выходного буфера с цветом >=0A0h не
перерисовываются.

Только и всего...
