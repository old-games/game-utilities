Файл графики .AIF игры REALMS OF ARKANIA 2: STAR TRAIL устроен так:
+00 DB*4 заголовок: 'AIF',01
+04 DB тип: 0,1,2 или 3
+06 DW ширина картинки
+08 DW высота картинки
+0A DW 100h, непонятно зачем нужное
+0C DB*18 нулевые байты
+1E ... тело файла
+???? DB*300h палитра (расположена в самом конце файла)
Тело файла имеет различный тип компрессии в зависимости от типа файла, а именно:
-тип 0: тело не сжато, просто побайтовый образ области; однако AIF-файлы этого
        типа использованы только для хранения карты и палитр
-тип 1: тело сжато RLE-методом:
        блок заполнения: DB 7Fh / DB счетчик / DB цвет;
        иначе байт просто копируется на экран.
-тип 2: тело сжато блочным RLE-методом:
        блок копирования: DB b<80h / DB (1-b) байт изображения;
        блок заполнения: DB b>=80h / DB цвет; этим цветом закрашиваются (b+1)
                         точек.
При этих методах раскодировка прекращается, когда в выходной буфер помещено
достаточно (то есть ширина*высота) байт.
-тип 3: тело сжато LZSS-методом в весьма идиотской реализации, для использования
        в программах почти непригодной. А именно:
        Тело файла используется как массив битов, причем выборка их идет начиная
        с младших битов и со _старших_ адресов. Выбранные биты вдвигаются в
        результат _справа_ в порядке выборки, то есть в результате они оказыва-
        ются расположенными в порядке, _обратном_ расположению в теле файла.
        LZSS-раскодировка идет по следующей схеме: пусть @=размер входного
        файла, #-смещение в выходном буфере, входной и выходной буфер начинаются
        со смещения 0. Тогда # := (по байтам) 0:[@-3]:[@-2]:[@-1], массив битов
        начинается с [@-5], причем байт [@-4] содержит, сколько первых битов
        следует пропустить. После чего в цикле читаются из входного потока и
        обрабатываются следующие битовые последовательности:
        - либо 0 11 11 .... 11 ?? ...                 , либо 1
                └──┴──┴┬───┴──┘├┘└───┴─┐
                    N штук     └M<>11b байты данных
          Это блок извлечения из входного потока (3*N+M) байт данных, причем
          _перед_ помещением каждого байта в выходной поток, # _уменьшается_
          на 1. После этого блока выполняется проверка, заполнен ли выходной
          буфер. Этого блока может не быть (когда 1 вместо 0 в его начале).
        - после чего либо 11 k ... 111 111 .... 111 ???  , либо ?? ...
                               └┬┘└───┴───┴┬───┴───┘├─┘         ├┘ └─┴─┐
                                СNT бит    N штук   └M<>111b    X<>11b └СNT бит
          Это блок копирования строки байт. В его первом варианте, если бит k=0,
          то CNT:=7, иначе CNT:=байт по смещению 7 во входном буфер; длина копи-
          руемой строки равна (7*N+M+5) байт. Во втором варианте, CNT:=байт по
          смещению (4+X) во входном буфере, а длина равна (X+2). В обеих вариан-
          тах, "CNT бит" образуют словное смещение D, и байты извлекаются со
          смещения (#+D) в выходном буфере, затем # _уменьшается_ на 1, и только
          затем байт помещается по смещению #.
          После этого блока выполняется проверка, заполнен ли выходной буфер.
          Если нет, то цикл повторяется.
Раскодировка прекращается в момент заполнения выходного буфера (когда смещение #
приняло значение 0).
Следует еще упомянуть, что при типе сжатия 3, в теле файла по смещению 0 находи-
тся двойное слово - размер этого тела.

Только и всего...