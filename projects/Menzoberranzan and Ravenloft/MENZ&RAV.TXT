Файлы ресурсов RES*. игр MENZOBERRANZAN, RAVENLOFT 1 и 2 устроены так:
+0 DD число ресурсов в файле
+4 DD смещение в файле 1-го ресурса
+8 ...
Ресурс устроен так:
+0 DB 'EH' (идентификатор)
+2 DB тип (возможны 1..7, типы 3 и 4 не графические, типа 5 нет в RAVENLOFT 1,
      типа 7 нет в MENZOBERRANZAN и RAVENLOFT 2)
+3 DW длина 2-го заголовка (=X) (в RAVENLOFT 1 она 0 для типов 6 и 7)
+5 ... (2-й заголовок)
2-й заголовок устроен так:
 для типа 1 (спрайт):
+X-8 DW число картинок в теле ресурса
+X-6 DW число строк в картинке
+X-4 DB число столбцов в картинке, деленное на 8
+X-3 DB прозрачный цвет (обычно 0FEh, если 0FFh - прозрачного цвета нет)
+X-2 DB модификация ресурса (всегда 0 в MENZOBERRANZAN, 0 или 3 в RAVENLOFT)
+X-1 DB неизвестно что (0 или 1, но вроде бы ни на что не влияет)
+X ... (тело ресурса)
  Крупные изображения хранятся так, что каждая строка считается отдельной кар-
  тинкой, так что если число строк в картинке = 1, то следует поменять местами
  число строк с числом картинок.
 для типа 2 (шрифт):
+X-88h DB*80h массив размеров символов по оси X
+X-8   DW число картинок в теле ресурса
+X-6   DW число строк в картинке
+X-4   DB число столбцов в картинке, деленное на 8
+X-3   DB прозрачный цвет (обычно 0FEh, если 0FFh - прозрачного цвета нет)
+X-2   DB модификация ресурса (всегда 3)
+X-1   DB неизвестно что (всегда 0)
+X ... (тело ресурса)
 для типа 5 (текстура) и 6 (3D-объект) в MENZOBERRANZAN и RAVENLOFT 2:
+X-5 DB модификация (возможна 0, 1 или 3, в MENZOBERRANZAN всегда 0, в
        RAVENLOFT 2 всегда 3)
+X-4 DD размер тела ресурса в несжатом виде
+X ... (тело ресурса)
 для типа 6 (текстура) и 7 (3D-объект) в RAVENLOFT 1:
отсутствует

Тело ресурса типов 1 и 2 модификации 0 состоит из идущих подряд картинок,
хранящихся построчно.
Тело ресурса типа 5 модификации 0 устроено так:
+0 DW высота столбца текстуры; при отсутствии значения, размер ее делится на
      40h столбцов; для текстур 40h*40h, значение не присутствует никогда
+2 ... собственно текстура по столбцам, 40h столбцов; в Menzoberranzan и
       Ravenloft 2, при отсутствии значения высоты столбца, в конце два лишних
       байта
Тело ресурса типа 6 модификации 0 устроено наиболее идиотским образом из всех
известных мне спрайтовых форматов. А именно:
+0 DW   полная ширина картинки (из-за бага используется помноженной на 1.5)
+2 DW   смещение слева первого непустого столбца внутри этой ширины
+4 DW   смещение слева последнего непустого столбца внутри этой ширины +1
+6 DW   смещение сверху первой непустой строки (?)
+8 DW   полная высота картинки (?)
+A DW*? для каждого непустого столбца смещение его дескриптора в ресурсе
+? DB*? собственно данные пикселов, расположенные по столбцам
+? DW*? дескрипторы столбцов
Дескриптор столбца состоит из 0 и более блоков по 3 слова каждый и концевика,
представляющего собой слово со значением 0. Блок дескриптора столбца устроен
так:
+0 DW смещение сверху самого нижнего пиксела блока+1 (?), умноженное на 2 (!)
+2 DW слово со знаком (!), которое следует прибавить к деленному на 2 следую-
      щему слову, чтобы получить смещение данных пикселов этого блока в ресурсе
      (!!!)
+4 DW смещение сверху самого верхнего пиксела блока (?), умноженное на 2 (!)
Тело ресурса типа 6 в RAVENLOFT 1 устроено так:
+0 DW размер данных ресурса в несжатом виде
+2 ... собственно данные ресурса, представляющие собой тело ресурса типа 5
       модификации 3
Тело ресурса типа 7 устроено так:
+0 DW размер данных ресурса в несжатом виде
+2 ... собственно данные ресурса, представляющие собой тело ресурса типа 6
       модификации 3 (имеется в виду тип 6 из Menzoberranzan'а)

Тело ресурса любого типа модификации 3 - это тело этого же типа модификации 0,
сжатое методом, использовавшимся в игре THE SUMMONING:
раскодирование ведется по следующей схеме LZ-метода:
Кольцевой буфер раскодировки имеет длину 1000h байт и инициализируется кодом
0FEh в количестве 0FEEh штук; раскодировка производится следующим образом:
извлекается флаговый байт, каждый бит которого означает: для 1, извлечь оче-
редной байт, поместить его в выходное изображение и в конец буфера; для 0,
извлечь слово, трактуемое как XYZTh и поместить в выходное изображение и в
конец буфера по одному (Y+3) байт начиная со смещения 0XZTh в буфере; по ис-
черпании битов флагового байта, извлечь новый флаговый байт. Раскодировка
прерывается в момент, когда в выходное изображение помещено сколько нужно
байт.
Только и всего...
