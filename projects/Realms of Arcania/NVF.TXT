Файл графики .NVF игр REALMS OF ARKANIA 1 и 2 состоит из заголовка, набора
картинок и палитры. Заголовок состоит из постоянной и переменной частей.
Постоянная часть устроена так:
+00 DB тип: от 0 до 5
+01 DW счетчик картинок
+03 ... переменная часть
Переменная часть в зависимости от типа файла устроена так:
Тип 0:
+00 DW ширина картинок
+02 DW высота картинок
+04 ... сами картинки
Тип 1:
+00 DW ширина 1-й картинки
+02 DW высота 1-й картинки
+04 DW ширина 2-й картинки
+06 DW высота 2-й картинки
+08 ... так же для всех картинок
+?? ... сами картинки
Типы 2 и 4:
+00 DW ширина картинок
+02 DW высота картинок
+04 DD размер в файле 1-й картинки
+08 DD размер в файле 2-й картинки
+0C ... так же для всех картинок
+?? ... сами картинки
Типы 3 и 5:
+00 DW ширина 1-й картинки
+02 DW высота 1-й картинки
+04 DD размер в файле 1-й картинки
+08 DW ширина 2-й картинки
+0A DW высота 2-й картинки
+0C DD размер в файле 2-й картинки
+10 ... так же для всех картинок
+?? ... сами картинки
Картинки имеют различный тип компрессии в зависимости от типа файла, а именно:
-типы 0 и 1: картинки не сжаты, просто побайтовый образ области.
-типы 4 и 5: картинки сжаты RLE-методом:
             блок заполнения: DB 7Fh / DB счетчик / DB цвет;
             иначе байт просто копируется на экран.
При этих методах раскодировка прекращается, когда в выходной буфер помещено
достаточно (то есть ширина*высота) байт.
-типы 2 и 3: картинки сжаты LZSS-методом в весьма идиотской реализации, для
             использования в программах почти непригодной. А именно:
             Картинка в файле рассматривается как массив битов, причем выборка
             их идет начиная с младших битов и со _старших_ адресов. Выбранные
             биты вдвигаются в результат _справа_ в порядке выборки, то есть в
             результате они оказываются расположенными в порядке, _обратном_
             расположению в файле. LZSS-раскодировка идет по следующей схеме:
             пусть @=размер картинки в файле, #-смещение в выходном буфере,
             входной и выходной буфер начинаются со смещения 0. Тогда # :=
             (по байтам) 0:[@-3]:[@-2]:[@-1], массив битов начинается с [@-5],
             причем байт [@-4] содержит, сколько первых битов следует пропус-
             тить. После чего в цикле читаются из входного потока и обрабаты-
             ваются следующие битовые последовательности:
             - либо 0 11 11 .... 11 ?? ...                 , либо 1
                     └──┴──┴┬───┴──┘├┘└───┴─┐
                         N штук     └M<>11b байты данных
               Это блок извлечения из входного потока (3*N+M) байт данных,
               причем _перед_ помещением каждого байта в выходной поток, #
               _уменьшается_ на 1. После этого блока выполняется проверка,
               заполнен ли выходной буфер. Этого блока может не быть (когда 1
               вместо 0 в его начале).
             - после чего либо 11 k ... 111 111 .... 111 ???  , либо ?? ...
                                    └┬┘└───┴───┴┬───┴───┘├─┘         ├┘ └─┴─┐
                                     СNT бит    N штук   └M<>111b    X<>11b │
                                                                     СNT бит┘
               Это блок копирования строки байт. В его первом варианте, если
               бит k=0, то CNT:=7, иначе CNT:=байт по смещению 7 во входном
               буфер; длина копируемой строки равна (7*N+M+5) байт. Во втором
               варианте, CNT:=байт по смещению (4+X) во входном буфере, а длина
               равна (X+2). В обеих вариантах, "CNT бит" образуют словное
               смещение D, и байты извлекаются со смещения (#+D) в выходном
               буфере, затем # _уменьшается_ на 1, и только затем байт помеща-
               ется по смещению #. После этого блока выполняется проверка,
               заполнен ли выходной буфер. Если нет, то цикл повторяется.
Раскодировка прекращается в момент заполнения выходного буфера (когда смещение #
приняло значение 0).
Следует еще упомянуть, что при LZSS-сжатии, в картинке по смещению 0 находится
двойное слово - размер тела картинки (но не всегда точный).

Палитра устроена так:
+00 DW счетчик цветов
+02 DB*3 1-й цвет; 2 старших бита в байтах, насколько мне известно, игнорирую-
         тся, кроме случая, когда все 3 байта равны 0FFh: в этом случае цвет
         не переустанавливается, сохраняя значение из уже активной на этот
         момент палитры.
+05 DB*3 2-й цвет
+08 ... так же для всех цветов
Следует заметить, что иногда картинки используют непереустанавливаемые цвета
из предшествующей палитры или (по крайней мере в одном случае) вообще другую
палитру.
В .NVF-файлах игры REALMS OF ARKANIA 2 всегда присутствует полная (256 цветов)
палитра; в .NVF-файлах игры REALMS OF ARKANIA 1 палитра может вообще отсутст-
вовать, или быть неполной; кроме того, в некоторых случаях имеющуюся палитру
необходимо загружать начиная не с цвета 0, а с цвета 80h (при этом, у картинок
с этой особенностью цвет 80h - прозрачный).

Только и всего...
