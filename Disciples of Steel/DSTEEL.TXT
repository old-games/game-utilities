Файл ресурсов .MK1 игры DISCIPLES OF STEEL состоит из заголовка и набора блоков
данных. Заголовок файла устроен так:
+000h DW*200 размеры блоков в файле, деленные на 2 (0 - блока нет)
+190h DW*200 если старший бит не установлен, то - размер распакованного блока,
             деленный на 2, иначе блок не сжат
+320h ...    блоки
Несжатые блоки - это анимация и звук (VOC-файлы); сжатые блоки - все остальное:
графика и палитры, музыка (CMF-файлы) и неграфические данные игры.

Тело сжатого блока сжато LZW-методом поверх RLE-метода в реализации, имеющей
заметное сходтво с компрессией, примененной в игре GOLDEN AXE. Похоже, что и
то, и другое было сделано на основе исходников какого-то древнего архиватора,
но в то время как код в GOLDEN AXE переработан для нужд игры, то распаковщик
в DISCIPLES OF STEEL явно взят готовый без малейшего понимания что там к чему.

Реализация LZW-сжатия весьма необычная: размер таблицы 2000h кодов и длина кода
ограничена только этим фактом, причем до определенного момента (каковой
определяется неким кривым методом, не слишком успешно пытающимся подсчитать
число реально использованных коротких кодов сжатия) используется префиксный
код: если 1-й бит 0, то за ним следует байт, если 1 - то код-100h, при этом
начальная длина кода 1 бит; 100h - код конца информации, код очистки не
используется; вместо очистки, по исчерпании пространства кодов начинается
переопределение неиспользованных и редкоиспользуемых кодов по некому опять же
кривому алгоритму; соответственно и данные начинаются со значащего кода, а не с
кода очистки.
Выборка кодов идет с младших битов и с младших адресов, распаковка производится
до тех пор, пока не будет распаковано заданное число байт, либо будут исчерпаны
входные данные (обычно же, наоборот, остаются лишние байты), либо встретится
код конца информации.
Описывать здесь сам LZW-метод я счел неуместным, да это и мало что дало бы
по причине упомянутых выше искривлений - так что детали реализации распаковщика
желающие могут получить, изучив его исходный текст.

То, что получается при LZW-распаковке, кроме того, дополнительно сжато
RLE-методом: 90h XXh - (XXh-1) раз повторить последний не равный 90h байт;
90h 00h - выдать 90h; иначе просто выдать байт в выходное изображение.

Графические данные, содержащиеся в сжатых блоках, в основном двух видов:
одиночные картинки и наборы мелких картинок.
Одиночная картинка устроена так:
+0 DW высота картинки
+2 DW ширина картинки
+4 DB*? тело картинки (простой битмап)
Набор мелких картинок состоит из нескольких блоков размером 198h байт,
устроенных так:
+0000h DW ширина блока (всегда 20, или же 0, означающий пустой блок)
+0002h DW высота блока (-"-)
+0004h DB*400 тело картинки (простой битмап)
+0194h DD 0
+0198h ... следующий блок
Кроме этого, среди сжатых блоков имеется и один анимационный блок, о которых
сказано ниже.

Анимационные блоки (в подавляющем большинстве своем несжатые, поскольку сжатие
при этом используется внутри блока) состоят из заголовка и набора страниц.
Заголовок анимационного блока устроен так:
+0 DW флаги: бит 0 - первая страница базовая (то есть, все остальные страницы
                     отрисовываются поверх отрисованной первой страницы)
             бит 1 - осцилляция (анимация сменой страниц вперед-назад, а не
                     циклически вперед)
             бит 2 - цвет 0 _НЕ_ прозрачный
+2 DW число страниц в блоке
+4 DW*? размеры страниц в блоке, деленные на 2
Страницы состоят также из заголовка и тела. Заголовок страницы устроен так:
+0 DW собственное смещение страницы по X
+2 DW собственное смещение страницы по Y
далее для несжатой страницы:
+4 DW высота картинки
+6 DW ширина картинки
+8 DB*? тело картинки (простой битмап, 0 может быть прозрачным цветом)
а для сжатой:
+4 DB 'CWG',0
+8 DW размер распакованного блока, деленный на 2
+A DW 1
+C ... сжатые данные страницы
Сжатые данные страницы в распакованном состоянии устроены так:
+0 DW высота картинки
+2 DW ширина картинки
+4 DB*? тело картинки (простой битмап, 0 может быть прозрачным цветом)
Метод сжатия здесь тот же, что описан выше для блоков файла ресурсов.

Только и всего...